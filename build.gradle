// gradle version 7.0.2, in eclipse gradle version 7.0.1 

plugins {
  //id 'org.kordamp.gradle.markdown' version '2.2.0' // https://github.com/aalmiray/markdown-gradle-plugin    not needed ?
  id "com.github.ben-manes.versions" version '0.52.0' // update check task: dependencyUpdates  https://github.com/ben-manes/gradle-versions-plugin
}

apply plugin: 'java'
apply plugin: 'eclipse'

java {
  sourceCompatibility = '11' // build compatiblity with java 11 and newer
  targetCompatibility = '11' // run compatiblity with java 11 and newer
}

sourceSets.main.java.srcDir 'src'
//sourceSets.main.java.srcDir 'explorer_src' // optional explorer needs jfx
sourceSets.main.java.srcDir 'dsl/src_generated'


/*
check for updates:
gradle dependencyUpdates
or
./gradlew dependencyUpdates
*/

/*
list (transitive) dependencies
gradle dependencies
or
./gradlew dependencies
*/

// upgrade gradle wrapper
//./gradlew wrapper --gradle-version=7.0.2


def isNonStable = { String version ->
  return version.contains('alpha') || version.contains('beta') 
}

dependencyUpdates {
  rejectVersionIf {  // reject all non stable versions
    isNonStable(it.candidate.version)
  }
}

repositories {
    mavenCentral()
}

dependencies {
  	implementation 'org.tinylog:tinylog-impl:2.8.0-M1'
	runtimeOnly 'org.tinylog:slf4j-tinylog:2.8.0-M1' // needed for jetty logger
	
  	implementation 'org.antlr:antlr4-runtime:4.9.3' // warning: newer version 4.10 may be incompatible to generated DSL source files
  	implementation 'org.javassist:javassist:3.30.2-GA'
  	
  	implementation 'org.mapdb:mapdb:1.0.9' // warning: newer versions v2 do break storage layout
  	
  	implementation 'org.xerial.snappy:snappy-java:1.1.10.7' // caution: newer versions may break storage layout (last tested 1.1.7.7)
  	
  	implementation 'org.apache.commons:commons-math3:3.6.1'
  	
  	implementation 'org.json:json:20250517'
  	implementation 'org.yaml:snakeyaml:2.4'  //implementation group: 'org.yaml', name: 'snakeyaml', version: '1.33' // caution: newer versions may break compatibility
  	implementation 'com.opencsv:opencsv:5.11.2'   	
  	implementation 'org.ini4j:ini4j:0.5.4' 
  	implementation 'ar.com.hjg:pngj:2.1.0'
  	implementation 'com.github.luben:zstd-jni:1.5.7-3' // caution: newer versions may break storage layout (last tested 1.4.5-6)
  	implementation 'me.lemire.integercompression:JavaFastPFOR:0.1.12' // version 0.2.1 compiled to new class file version not compatible with java 11; caution: newer versions may break strorage layout
  	implementation 'ch.randelshofer:fastdoubleparser:2.0.1'
  	
  	implementation 'org.eclipse.jetty:jetty-server:11.0.25' // v12.x not compatible with Java 11
  	implementation 'org.eclipse.jetty:jetty-security:11.0.25'
  	
  	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	
	implementation 'javax.validation:validation-api:2.0.1.Final'
	
	implementation 'org.gdal:gdal:2.2.0' // caution: newer versions may break compatibility
  	
  	implementation 'org.influxdb:influxdb-java:2.25'
  	implementation 'com.h2database:h2:2.3.232'
}

dependencies {
    //compile fileTree('lib') // include local libraries
    //compileOnly files('/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext/jfxrt.jar') //optional explorer needs jfx - dependency openjfx on ubuntu (openjdk does not include openjfx), correct path for at least OpenJDK 10
}

jar {
	from file('src/tinylog.properties')
	from file('src/command_descriptions.yaml') // terminal command descriptions
	destinationDirectory = project.layout.projectDirectory.dir('package')
	
	manifest {
		String classPathFiles = "";
		for(java.io.File file : files(configurations.runtimeClasspath)) {
			classPathFiles += "lib/"+file.getName()+" "; 
		}
		//println("the class path: "+classPathFiles);
        attributes 	'Built-Date': new Date(),
					'Built-JDK': System.getProperty('java.version'),
					'Main-Class': 'tsdb.run.Terminal',
					'Class-Path': classPathFiles
    }
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8' // set text encoding of java files to UTF-8
	
	/*def v = JavaVersion.current()	
	if(v==JavaVersion.VERSION_1_1||v==JavaVersion.VERSION_1_2||v==JavaVersion.VERSION_1_3||v==JavaVersion.VERSION_1_4||v==JavaVersion.VERSION_1_5||v==JavaVersion.VERSION_1_6||v==JavaVersion.VERSION_1_7) {
		throw new GradleException('java version 8 or newer needed for build')
	}
	
	if(v != JavaVersion.VERSION_1_8) { // java version is newer than java 8
		logger.warn('WARNING: Building TubeDB with java newer than java 8 results in package that is not fully compatible with java 8 runtime.')
	}*/	
	
	/*if(v != JavaVersion.VERSION_1_8) { // java version is newer than java 8 (java 9 with modules)
		options.compilerArgs.addAll(["--add-exports", "javafx.base/com.sun.javafx.binding=ALL-UNNAMED"]) // compatiblity to modules in java 9 and newer
	}*/

	//options.deprecation = true
	//options.listFiles = true
	//options.verbose = true
}

task clean_package(type: Delete) {
	description = 'delete folder package'
	delete 'package'
}

task copy_lib(type: Copy) {
	description = 'copy folder lib to package'
	from files(configurations.runtimeClasspath)
    into 'package/lib'
}

task copy_add(type: Copy) {
	description = 'copy folder add to package'
	from fileTree('add')
	into 'package'
}

task copy_add_windows(type: Copy) {
	description = 'copy folder add_windows to package'
	from fileTree('add_windows')
	into 'package'
}

task copy_add_linux(type: Copy) {
	description = 'copy folder add_linux to package'
	from fileTree('add_linux')
	into 'package'
}

task copy_webcontent(type: Copy) {
	description = 'copy folder webcontent to package'
	from fileTree('webcontent')
	into 'package/webcontent'
}

task copy_build(type: Copy, dependsOn: [jar]) {
	description = 'copy compiled java jar file to package'
	from fileTree('build/libs')
	into 'package'
}

task copy_config(type: Copy, dependsOn: [jar]) {
	description = 'copy folder config to package'
	from fileTree('config')
	into 'package/config'
}

task _build_package(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_linux ]) {
	group = 'project'
	description = 'create TubeDB package for Linux'	
}

task _build_package_windows(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_windows ]) {
	group = 'project' 
	description = 'create TubeDB package for Windows'		
}

task _build_package_linux_windows(dependsOn:[ clean_package, copy_build, copy_lib, copy_webcontent, copy_add, copy_config, copy_add_linux, copy_add_windows ]) {
	group = 'project'
	description = 'create TubeDB package for Linux and Windows'	
}

task _create_javadoc(type: Javadoc) {
	group = 'project'
	description = 'create javadoc for TubeDB'
	source = sourceSets.main.allJava
	destinationDir = file('docs/javadoc')
	title = 'TubeDB'
	options.header = 'TubeDB'
	options.windowTitle = 'TubeDB'
	options.overview = 'src/overview.html'
	options.links("http://docs.oracle.com/javase/8/docs/api")
	options.links("https://docs.oracle.com/javase/8/javafx/api")
	options.noTimestamp = true
}